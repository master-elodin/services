def scriptProperties = [
    name: "Services",
    version: "1.0.1",
    author: "Tim VanDoren",
    description: "Make the Service Console look nicer!",
    // target is what Tampermonkey uses to decide which pages to run on
    target: "/(services).*(ServicesConsole)/",
    externalDependencies: ["https://cdnjs.cloudflare.com/ajax/libs/knockout/3.4.0/knockout-min.js",
        "https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js",
        "https://cdnjs.cloudflare.com/ajax/libs/knockout.mapping/2.4.1/knockout.mapping.min.js"]
]

// TODO: move CSS properties elsewhere
def cssProperties = [
    // colors
    '$clouds': '#ecf0f1',
    '$darkerClouds': '#DFE3E4',
    '$slightlyDarkerClouds': '#A0A4A5',
    // TODO: better color for disabled
    '$disabled': 'grey',
    '$midnight': '#2c3e50',
    '$darkerMidnight': '#1F3143',
    '$lightBlue': '#2683f0',
    // other
    '$pageHeaderHeight': '50px'
]

def getBinFolder = {
    def binFolder = new File("bin")
    if(!binFolder.exists()) {
        binFolder.mkdirs()
    }
    binFolder
}

def getPlaceholderMatches = { line -> line =~ /\$\{.*\}/ }
def getPlaceholderName = { placeholder -> placeholder.trim()[2..-2]}

def fillProperties = { line, dependencyModifier ->
    getPlaceholderMatches(line).each {
        def propertyName = getPlaceholderName(it)
        def property = scriptProperties[propertyName]
        if(propertyName == "content") {
            property = file("bin/combined.js").text
        } else if(propertyName == "versionForJs") {
            property = "var SCRIPT_VERSION = \"${scriptProperties.version}\"\n"
        } else if(property == null) {
            throw new GradleScriptException("No property found for placeholder: ${it}", null)
        }
        if(propertyName == "externalDependencies") {
            property = dependencyModifier(property)
        }
        logger.info "replacing ${it} with ${property}"
        line = line.replace(it, property)
    }
    line
}

def replaceFromFile = { line, lineModifier={ text -> text } ->
    def lineToWrite = line
    def placeholderMatches = getPlaceholderMatches(line)
    if(placeholderMatches) {
        def placeholder = placeholderMatches[0]
        lineToWrite = line.replace(placeholder, lineModifier(new File("${getPlaceholderName(placeholder)}").text))
    }
    lineToWrite
}

def combineStuff = { fileType, lineModifier={ text -> text } ->
    new File(getBinFolder(), "combined.${fileType}").withWriter { writer ->
        new File("src/shell/shell.${fileType}").eachLine { line ->
            writer << "${replaceFromFile(line, lineModifier)}\n"
        }
    }
}

task combineHtml {
    inputs.dir("src")
    outputs.file('bin/combined.html')

    doLast {
        def html = file("src/shell/shell.html").text
        def placeholders = getPlaceholderMatches(html)
        while(placeholders) {
            placeholders.each { placeholder ->
                html = html.replace(placeholder, new File("${getPlaceholderName(placeholder)}").text)
            }
            placeholders = getPlaceholderMatches(html)
        }
        html = html.replaceAll(/>\s*</, '><').replaceAll(/\n/, '')
        new File(getBinFolder(), "combined.html").write("jQuery('body').removeClass().removeAttr('style').html('${html}');");
    }
}

task combineCss {
    inputs.dir("src")
    outputs.file('bin/combined.css')

    doLast {
        def css = []
        fileTree("src").include("**/*.css").collect({ cssFile ->
            def cssPart = ''
            cssFile.eachLine { line ->
                (line =~ /\$\w+/).each {
                    line = line.replace(it, cssProperties[it])
                }
                cssPart += "${line.trim()} "
            }
            // TODO: check for comments
            if(!cssPart.isEmpty()) {
                if(cssPart.contains("'")) {
                    throw new GradleScriptException("Cannot have single quotes in CSS.\nLine: ${cssPart}", null)
                }
                css.push("'${cssPart}'")
            }
        })
        new File(getBinFolder(), 'combined.css').text = css.join(",\n")
    }
}

task combineJs {
    inputs.dir("src")
    outputs.file('bin/combined.js')
    dependsOn 'combineHtml'
    dependsOn 'combineCss'

    doLast {
        // TODO: don't add tab for css
        // add a tab because it looks better for both scripts
        combineStuff("js", { text -> "    ${text.split('\n').join('\n    ')}"})
    }
}

task createDevtoolsScript {
    dependsOn 'combineJs'
    inputs.dir("src")

    doLast {
        new File(getBinFolder(), "${scriptProperties.name.toLowerCase()}-devtools.js").withWriter { writer ->
            new File("src/templates/devtools.js").eachLine { line ->
                writer << fillProperties("${line}\n", { property -> "\"${property.collect { it }.join("\",\"")}\"" })
            }
        }
    }
}

task createTampermonkeyScript {
    dependsOn 'combineJs'
    inputs.dir("src")

    doLast {
        new File(getBinFolder(), "${scriptProperties.name}.user.js").withWriter { writer ->
            new File("src/templates/tampermonkey.js").eachLine { line ->
                writer << fillProperties("${line}\n", { property -> property.collect { "// @require      ${it}"}.join("\n") })
            }
        }
    }
}

task clean << {
    delete("bin")
}

tasks.create('build').dependsOn 'createTampermonkeyScript','createDevtoolsScript'
